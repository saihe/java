public class operation {

	//配列
	//日付：0 時間：1 科目：2 入金：3 出金：4 残金：5
	//ArrayList list = new ArrayList();
	String[][] list = new String[10][6];
	String[] sub = new String[6];
	int[] total = new int[3];


	//日付入力
	public String[] getDate(int d){
		String sd = String.valueOf(d);
		sub[0] = sd;
		return sub;
	}

	//時間入力
	public String[] getTime(int t){
		String st = String.valueOf(t);
		sub[1] = st;
		return sub;
	}

	//科目入力
	public String[] getWhat(String w){
		String sw = String.valueOf(w);
		sub[2] = sw;
		return sub;
	}

	//入金・出金入力、残高計算・入力
	public String[] getResult(int p , int m){
		int total = p - m ;
		String sp = String.valueOf(p);
		String sm = String.valueOf(m);
		sub[3] = sp;
		sub[4] = sm;
		String sr = String.valueOf(total);
		sub[5] = sr;
		return sub;
	}

	//データを配列
	public String[][] listUp(){
			list.add(sub);
		return list;
	}
/*
	//更新
	public String[][] update(int f , int s , String u){
		//入力された数値で更新する配列を選ぶ

		switch(f){
		case 0:
			date.set(s ,  u);
			break;
		case 1:
			time.set(s ,  u);
			break;
		case 2:
			what.set(s ,  u);
			break;
		case 3:
			plus.set(s ,  u);
			break;
		case 4:
			minus.set(s , u);
			break;
		default:
			System.out.println("コマンドエラーです");
		}

		//配列上の残金を計算し直す
		int pm = Integer.parseInt(sub.get(s));
		int mm = Integer.parseInt(sub.get(s));
		String tm =String.valueOf(pm - mm);
		sub.set(s ,  tm);
		return list;
	}

*/
	//削除
	public String[][] delete(){
		//配列の初期化
		list = new String[10][6];
		sub = new String[6];
		return list;
	}

/*
	//所持金合計
	public int[] getTotal(){
		int plusTotal = 0;
		int minusTotal = 0;
		for(int i = 0 ; i < list.size() ; i++){
			plusTotal += Integer.parseInt(list.get(i));
			minusTotal += Integer.parseInt(list.get(i));
		}

		int resultTotal = (plusTotal - minusTotal);
		total[0] = plusTotal;
		total[1] = minusTotal;
		total[2] = resultTotal;
		return total;
	}
*/
}
